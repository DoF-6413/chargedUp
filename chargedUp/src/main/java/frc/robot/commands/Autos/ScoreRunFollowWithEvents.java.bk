// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands.Autos;

import java.util.HashMap;

import java.util.HashMap;

import com.pathplanner.lib.PathConstraints;
import com.pathplanner.lib.PathPlanner;
import com.pathplanner.lib.PathPlannerTrajectory;
import com.pathplanner.lib.commands.FollowPathWithEvents;

import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.robot.commands.TrajectoryRunner;
import frc.robot.commands.ArmControls.TelescoperPID;
import frc.robot.commands.ArmControls.TelescoperReset;
import frc.robot.subsystems.ArmSubsystem;
import frc.robot.subsystems.DrivetrainSubsystem;
import frc.robot.subsystems.EndEffectorSubsystem;
import frc.robot.subsystems.TelescoperSubsystem;

// NOTE:  Consider using this command inline, rather than writing a subclass.  For more
// information, see:
// https://docs.wpilib.org/en/stable/docs/software/commandbased/convenience-features.html
public class ScoreRunFollowWithEvents extends SequentialCommandGroup {

  PathPlannerTrajectory kOutCommunity = PathPlanner.loadPath("Out Community", new PathConstraints(1.2, .8));

  /** Creates a new ScoreConeFollowWithEvents. */
  public ScoreRunFollowWithEvents(ArmSubsystem arm, TelescoperSubsystem telescoper, EndEffectorSubsystem endEffector, DrivetrainSubsystem drive) {
    HashMap<String, Command> eventOutCommunityMap = new HashMap<>();
    eventOutCommunityMap.put("BackOutArm", new BackingOutArm(arm, telescoper, endEffector));
    // Add your commands in the addCommands() call, e.g.
    // addCommands(new FooCommand(), new BarCommand());
    addCommands(
      new ScoreCone(arm, telescoper, endEffector, drive),
      new FollowPathWithEvents(new TrajectoryRunner(drive, kOutCommunity.relativeTo(drive.getPose()), true),
      kOutCommunity.getMarkers(),
      eventOutCommunityMap)
    );
  }
}
